#ifndef OPTIONS_H
#define OPTIONS_H

#include <stddef.h>

#define OPTION_WORD 0b00
#define OPTION_LONG 0b01
#define OPTION_SHORT 0b10

/*
 * Type for functions for handling options.
 */
typedef int (*OptionFunction)(size_t argc, char **argv);

/*
 * Struct that represents an option.
 */
typedef struct {
    char *key;
    char key_short;
    size_t arg_min;
    size_t arg_max;
    OptionFunction call;
} Option;

/*
 * Information about an option returned from parse_argument.
 */
typedef struct {
    size_t opt_argc;
    char **opt_argv;
    Option *option;
} ArgInfo;

/*
 * Struct storing list of options initialized with init_options.
 *
 * Use add_option to add options to options->list.
 */
typedef struct {
    size_t count;
    size_t size;
    Option *word;
    Option *list;
} Options;

/*
 * Initializes Options struct.
 *
 * In case of allocation error writes ENOMEM to errno.
 *
 * @return              Options struct
 */
Options *init_options();

/*
 * Frees Options struct.
 *
 * @param   options     Options struct generated by init_options.
 */
void free_options(Options *options);

/*
 * Adds a new Option to options->list.
 *
 * In case of allocation error writes ENOMEM to errno.
 *
 * @param   options     Options struct generated by init_options.
 * @param   key         Long option key, can be NULL.
 * @param   key_short   Short option key, can be NULL.
 * @param   arg_min     Minimum number of arguments taken by the option.
 * @param   arg_max     Maximum number of arguments taken by the option.
 * @param   function    Function to handle the provided option.
 */
void add_option(Options *options, char *key, char key_short,
    size_t arg_min, size_t arg_max, OptionFunction function);

/*
 * Returns option by key.
 *
 * @param   options     Options struct generated by init_options.
 * @param   type        Specifies which type of keys it should search.
 *                      OPTION_WORD will return options->word.
 *                      OPTION_LONG will search long keys.
 *                      OPTION_SHORT will search short keys.
 * @param   key         Key to search for.
 * @return              Found Option, NULL if not found.
 */
Option *get_option(Options *options, int type, char *key);

/*
 * Finds Option that matches the first argument in argv.
 *
 * @param options       Options struct generated by init_options.
 * @param argc          Pointer to value storing lenght of argv.
 * @param argv          Pointer to array storing arguments.
 * @return              Struct storing information about the option.
 *                      opt_argc is number of arguments provided to the option.
 *                      opt_argv is a pointer to the arguments provided to the option.
 *                      call is a pointer to a function that handles the option.
 */
ArgInfo *parse_argument(Options *options, size_t *argc, char ***argv);

#endif
